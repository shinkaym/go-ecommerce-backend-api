// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package database

import (
	"context"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (shopId, productName) VALUES (?, ?)
`

type CreateProductParams struct {
	Shopid      int32
	Productname string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct, arg.Shopid, arg.Productname)
	return err
}

const createShop = `-- name: CreateShop :exec
INSERT INTO shops (shopname) VALUES(?)
`

func (q *Queries) CreateShop(ctx context.Context, shopname string) error {
	_, err := q.db.ExecContext(ctx, createShop, shopname)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT productid, shopid, productname FROM products WHERE productId = ?
`

func (q *Queries) GetProduct(ctx context.Context, productid int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, productid)
	var i Product
	err := row.Scan(&i.Productid, &i.Shopid, &i.Productname)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT productid, shopid, productname FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(&i.Productid, &i.Shopid, &i.Productname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getShop = `-- name: GetShop :one
SELECT shopid, shopname FROM shops WHERE shopId = ?
`

func (q *Queries) GetShop(ctx context.Context, shopid int32) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShop, shopid)
	var i Shop
	err := row.Scan(&i.Shopid, &i.Shopname)
	return i, err
}

const getShops = `-- name: GetShops :many
SELECT shopid, shopname FROM shops
`

func (q *Queries) GetShops(ctx context.Context) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, getShops)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Shop
	for rows.Next() {
		var i Shop
		if err := rows.Scan(&i.Shopid, &i.Shopname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
